// <auto-generated />
namespace BattleChessUnitTests
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using BattleChess.Interfaces;
    using BattleChess.Infrastructure;
    using BattleChess.Utilities;

    /// <summary>
    /// Unit tests for IPosition objects
    /// </summary>
    [TestClass]
    public class PositionTestCase
    {
        private IPosition position;
        private string failMessage;
        private string expectedMessage;
        private string actualMessage;

        /// <summary>
        /// Assure no exceptions are thrown when a new Position object is created with valid constructor parameters
        /// </summary>
        [TestMethod]
        public void TestCreatingNewPositionWithValidParametersThrowsNoException()
        {
            for (int c = 65; c <= 72; c++)
            {
                char column = (char)c;
                for (int row = 1; row <= 8; row++)
                {
                    try
                    {
                        this.position = new Position(column, row);
                    }
                    catch (ArgumentException e)
                    {
                        this.failMessage = string.Format("Unexpected exception of type {0} caught: {1}", 
                            e.GetType(),
                            e.Message);
                        Assert.Fail(this.failMessage);
                    }
                }
            }
        }

        /// <summary>
        /// Assure that Column values are assigned correctly
        /// </summary>
        [TestMethod]
        public void TestGetColumnReturnsCorrectValue()
        {
            for (int c = 65; c <= 72; c++)
            {
                char column = (char)c;
                for (int row = 1; row <= 8; row++)
                {
                    this.position = new Position(column, row);
                    Assert.AreEqual(column, this.position.Column);
                }
            }
        }

        /// <summary>
        /// Assure that Row values are assigned correctly
        /// </summary>
        [TestMethod]
        public void TestGetRowReturnsCorrectValue()
        {
            for (int c = 65; c <= 72; c++)
            {
                char column = (char)c;
                for (int row = 1; row <= 8; row++)
                {
                    this.position = new Position(column, row);
                    Assert.AreEqual(row, this.position.Row);
                }
            }
        }

        /// <summary>
        /// Assure that correct exception and correct exception message are returned when invalid Column value is assigned
        /// </summary>
        [TestMethod]
        public void TestCreatingNewPositionWithInvalidColumnThrowsCorrectExceptionMessage()
        {
            this.expectedMessage = string.Format("{0}{1}Parameter name: value", ErrorMessages.InvalidColumn, Environment.NewLine);
            for (int c = 0; c <= 127; c++)
            {
                if (c >= 65 && c <= 72)
                {
                    continue;
                }

                char column = (char)c;
                for (int row = 1; row <= 8; row++)
                {
                    try
                    {
                        this.position = new Position(column, row);
                        Assert.Fail("Expected exception, but none was thrown");
                    }
                    catch (ArgumentOutOfRangeException e)
                    {
                        this.actualMessage = e.Message;
                        Assert.AreEqual(this.expectedMessage, this.actualMessage);
                    }
                }
            }
        }

        /// <summary>
        /// Assure that correct exception and correct exception message are returned when invalid Row value is assigned
        /// </summary>
        [TestMethod]
        public void TestCreatingNewPositionWithInvalidRowThrowsCorrectExceptionMessage()
        {
            this.expectedMessage = string.Format("{0}{1}Parameter name: value", ErrorMessages.InvalidRow, Environment.NewLine);
            for (int c = 65; c <= 72; c++)
            {
                char column = (char)c;
                for (int row = 0; row <= 100; row++)
                {
                    if (row >= 1 && row <= 8)
                    {
                        continue;
                    }

                    try
                    {
                        this.position = new Position(column, row);
                        Assert.Fail("Expected exception, but none was thrown");
                    }
                    catch (ArgumentOutOfRangeException e)
                    {
                        this.actualMessage = e.Message;
                        Assert.AreEqual(this.expectedMessage, this.actualMessage);
                    }
                }
            }
        }
    }
}
