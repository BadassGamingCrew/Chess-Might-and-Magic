// <auto-generated />
namespace BattleChess.Interfaces
{
    using BattleChess.Infrastructure;
    using Microsoft.Xna.Framework;

    using System;
    using Utilities;

    /// <summary>
    /// Interface for ChessBoardPiece objects
    /// </summary>
    public interface IField : IFactory<IField>
    {
        /// <summary>
        /// The chess board that this Filed is located on
        /// </summary>
        IChessBoard ChessBoard { get; }

        /// <summary>
        /// Get's the position of the IField object
        /// </summary>
        /// <returns>
        /// A IPosition object representing the position of the current field on the chess board
        /// </returns>
        IPosition Position { get; set; }

        /// <summary>
        /// Gets/Sets the Chess Piece placed in this field. Throws exception if HasChessPiece() is False
        /// </summary>
        /// <returns>The Chess Piece attached to the IField object</returns>
        /// <exception cref="ArgumentNullException">Thrown when HasChessPiece() returns False</exception>
        IChessPiece ChessPiece { get; set; }

        /// <summary>
        /// Checks if the IField object has an IChessPiece attached to it
        /// </summary>
        /// <returns>
        /// True if there's an IChessPiece object and False if there isn't
        /// </returns>
        bool HasChessPiece { get; }

        /// <summary>
        /// The color of the current IField object
        /// </summary>
        ColorType Color { get; }
    }
}
