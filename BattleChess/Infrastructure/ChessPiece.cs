// <auto-generated />

using System;
using BattleChess.Core;
using Microsoft.Xna.Framework;

namespace BattleChess.Infrastructure
{
    using System.Collections.Generic;
    using Interfaces;
    using Utilities;

    /// <summary>
    /// Abstract class for ChessPiece objects
    /// </summary>
    public abstract class ChessPiece : IChessPiece
    {
        private IDrawableGameObject drawObject;
        /// <summary>
        /// ChessPiece constructor that takes an IMovePattern object as argument
        /// </summary>
        /// <param name="movePattern">The IMovePattern object associated with this chess piece</param>
        /// /// <param name="color">The color for this chess piece</param>
        protected ChessPiece(IMovePattern movePattern, ColorType color)
        {
            this.MovePattern = movePattern;
            this.Color = color;
            this.IsDrawable = true;
        }

        public bool IsDrawable { get; private set; }

        public bool DrawableAttributeSet
        {
            get { return this.DrawObjectIsNull(); }
        }

        public IDrawableGameObject DrawAttribute
        {
            get
            {
                if (!this.DrawableAttributeSet)
                {
                    throw new ObjectDisposedException("value", ErrorMessages.DrawAttributeNotSet);
                }

                return this.drawObject;
            }

            private set { this.drawObject = value; }
        }

        public ICollection<IMove> PossibleMoves { get; private set; }

        public IField Field { get; private set; }

        public IAttack Attack { get; private set; }

        public IDefense Defence { get; private set; }

        public bool IsDead { get; private set; }

        public int Health { get; private set; }

        public int Mana { get; private set; }

        public ColorType Color { get; private set; }

        public IMovePattern MovePattern { get; private set; }

        public abstract IChessPiece Create();

        public void MakeDrawable(GameEngine game)
        {
            if (this.DrawObjectIsNull())
            {
                this.DrawAttribute = new DrawableChessPiece(game, this);
            }
        }

        public void AddHealth(int healthValue)
        {
            throw new System.NotImplementedException();
        }

        public void AddMana(int manaValue)
        {
            throw new System.NotImplementedException();
        }

        public void GeneratePossibleMoves()
        {
            throw new System.NotImplementedException();
        }

        public bool Equals(IGameObject other)
        {
            return TypeIsSame(other) && AttributesAreSame((IChessPiece) other);
        }

        private bool DrawObjectIsNull()
        {
            return this.drawObject == default(IDrawableGameObject);
        }

        private bool TypeIsSame(IGameObject other)
        {
            return other is IChessPiece;
        }

        private bool AttributesAreSame(IChessPiece other)
        {
            return
                this.Attack.Equals(other.Attack) &&
                this.Defence.Equals(other.Defence) &&
                this.IsDead == other.IsDead &&
                this.Health == other.Health &&
                this.Mana == other.Mana &&
                this.Color == other.Color &&
                this.MovePattern == other.MovePattern;
        }
    }
}
