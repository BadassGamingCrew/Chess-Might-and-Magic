// <auto-generated />
namespace BattleChess.Infrastructure
{
    using System.Collections.Generic;
    using Interfaces;
    using Utilities;

    /// <summary>
    /// Abstract class for ChessPiece objects
    /// </summary>
    public abstract class ChessPiece : IChessPiece
    {
        /// <summary>
        /// ChessPiece constructor that takes an IMovePattern object as argument
        /// </summary>
        /// <param name="movePattern">The IMovePattern object associated with this chess piece</param>
        /// /// <param name="color">The color for this chess piece</param>
        protected ChessPiece(IMovePattern movePattern, ColorType color)
        {
            this.MovePattern = movePattern;
            this.Color = color;
        }

        public ICollection<IMove> PossibleMoves { get; private set; }

        public IField Field { get; private set; }

        public IAttack Attack { get; private set; }

        public IDefense Defence { get; private set; }

        public bool IsDead { get; private set; }

        public int Health { get; private set; }

        public int Mana { get; private set; }

        public ColorType Color { get; private set; }

        private IMovePattern MovePattern { get; set; }

        public abstract IChessPiece Create();

        public void AddHealth(int healthValue)
        {
            throw new System.NotImplementedException();
        }

        public void AddMana(int manaValue)
        {
            throw new System.NotImplementedException();
        }

        public void GeneratePossibleMoves()
        {
            throw new System.NotImplementedException();
        }
    }
}
