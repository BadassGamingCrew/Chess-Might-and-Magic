// <auto-generated />

using System;
using BattleChess.Core;
using Microsoft.Xna.Framework;

namespace BattleChess.Infrastructure
{
    using Interfaces;
    using Utilities;

    /// <summary>
    /// Abstarct class for Field objects
    /// </summary>
    public abstract class Field : IField
    {
        private IDrawableGameObject drawObject;

        /// <summary>
        /// Field constructor that takes an IPosition object as argument
        /// </summary>
        /// <param name="position">The position for the current IField object</param>
        /// <param name="color">The color for the current IField object</param>
        /// <param name="chessBoard">The chess board for the current IField object</param>
        protected Field(IPosition position, ColorType color, IChessBoard chessBoard)
        {
            this.ChessBoard = chessBoard;
            this.Position = position;
            this.Color = color;
            this.HasChessPiece = false;
            this.IsDrawable = true;
        }

        public bool IsDrawable { get; private set; }

        public bool DrawableAttributeSet
        {
            get { return this.DrawObjectIsNull(); }
        }

        public IDrawableGameObject DrawAttribute
        {
            get
            {
                if (!this.DrawableAttributeSet)
                {
                    throw new ObjectDisposedException("value", ErrorMessages.DrawAttributeNotSet);
                }

                return this.drawObject;
            }

            private set { this.drawObject = value; }
        }

        public IChessBoard ChessBoard { get; private set; }

        public IPosition Position { get; set; }

        public IChessPiece ChessPiece { get; set; }

        public bool HasChessPiece { get; private set; }

        public ColorType Color { get; private set; }

        public void MakeDrawable(GameEngine game)
        {
            if (this.DrawObjectIsNull())
            {
                this.DrawAttribute = new DrawableField(game, this);
            }
        }

        public bool Equals(IGameObject other)
        {
            return TypeIsSame(other) && AttributesAreSame((IField) other);
        }

        private bool DrawObjectIsNull()
        {
            return this.drawObject == default(IDrawableGameObject);
        }

        private bool TypeIsSame(IGameObject other)
        {
            return other is IField;
        }

        private bool AttributesAreSame(IField other)
        {
            return
                this.Position.Equals(other.Position) &&
                this.HasChessPiece == other.HasChessPiece &&
                this.ChessPiece.Equals(other.ChessPiece) &&
                this.Color == other.Color;
        }
    }
}
