// <auto-generated />

using System.Linq;
using BattleChess.Utilities;

namespace BattleChess.Infrastructure
{
    using System;
    using System.Collections.Generic;
    using BattleChess.Interfaces;
    using BattleChess.Core;
    using Microsoft.Xna.Framework;

    /// <summary>
    /// Concrete implementation of IChessBoard. Extends DrawableGameComponent
    /// </summary>
    public class ChessBoard : IChessBoard
    {
        private readonly Dictionary<IPosition, IField> chessBoard;
        private IDrawableGameObject drawObject;

        /// <summary>
        /// ChessBoard constructor
        /// </summary>
        /// <param name="game"></param>
        public ChessBoard()
        {
            this.chessBoard = new Dictionary<IPosition, IField>();
            this.PopulateChessBoard();
            this.IsDrawable = true;
        }

        public bool IsDrawable { get; private set; }

        public bool DrawableAttributeSet
        {
            get { return this.DrawObjectIsNull(); }
        }

        public IDrawableGameObject DrawAttribute
        {
            get
            {
                if (!this.DrawableAttributeSet)
                {
                    throw new ObjectDisposedException("value", ErrorMessages.DrawAttributeNotSet);
                }

                return this.drawObject;
            }

            private set { this.drawObject = value; }
        }

        public IField GetFieldAt(IPosition position)
        {
            return this.chessBoard[position];
        }

        public ICollection<IField> GetAllFields()
        {
            return this.chessBoard.Values;
        }

        public void MakeDrawable()
        {
            if (this.DrawObjectIsNull())
            {
                this.DrawAttribute = new DrawableChessBoard(this);   
            }
        }

        public bool Equals(IGameObject other)
        {
            return 
                TypeIsSame(other) && 
                FieldNumIsSame(((IChessBoard)other).GetAllFields()) && 
                FieldsAreEqual(((IChessBoard) other).GetAllFields());
        }

        private void PopulateChessBoard()
        {
            //TODO: Implement
        }

        private bool DrawObjectIsNull()
        {
            return this.drawObject == default(IDrawableGameObject);
        }

        private bool TypeIsSame(IGameObject other)
        {
            return other is IChessBoard;
        }

        private bool FieldNumIsSame(ICollection<IField> otherFields)
        {
            return this.GetAllFields().Count == otherFields.Count;
        }

        private bool FieldsAreEqual(ICollection<IField> otherFields)
        {
            IEnumerator<IField> thisEnumerator = this.GetAllFields().GetEnumerator();
            IEnumerator<IField> otherEnumerator = otherFields.GetEnumerator();

            while (thisEnumerator.MoveNext() && otherEnumerator.MoveNext())
            {
                if (!thisEnumerator.Current.Equals(otherEnumerator.Current))
                {
                    return false;
                }
            }

            return true;
        }
    }
}
