// <auto-generated />
namespace BattleChess.Infrastructure
{
    using System;
    using System.Collections.Generic;
    using BattleChess.Interfaces;
    using BattleChess.Core;
    using Microsoft.Xna.Framework;

    /// <summary>
    /// Concrete implementation of IChessBoard. Extends DrawableGameComponent
    /// </summary>
    public class ChessBoard : DrawableGameComponent, IChessBoard
    {
        private static readonly GameEngine Engine = GameEngine.Instance;
        private readonly Dictionary<IPosition, IField> chessBoard; 

        /// <summary>
        /// ChessBoard constructor
        /// </summary>
        /// <param name="game"></param>
        public ChessBoard()
            : base(Engine)
        {
            this.chessBoard = new Dictionary<IPosition, IField>();
            this.PopulateChessBoard();
        }

        public IField GetFieldAt(IPosition position)
        {
            return this.chessBoard[position];
        }

        public override void Initialize()
        {
            //TODO
            base.Initialize();
        }

        public override void Update(GameTime gameTime)
        {
            foreach (IField field in this.chessBoard.Values)
            {
                //TODO: Add exception if the field does not implement IUpdateable
                ((IUpdateable)field).Update(gameTime);
            }

            base.Update(gameTime);
        }

        public override void Draw(GameTime gameTime)
        {
            Engine.SpriteBatch.Begin();
            base.Draw(gameTime);

            foreach (IField field in this.chessBoard.Values)
            {
                //TODO: Add exception if the field does not implement IDrawable
                ((IDrawable)field).Draw(gameTime);
            }

            foreach (IField field in this.chessBoard.Values)
            {
                if (field.ChessPiece != null)
                {
                    //TODO: Add exception if the field does not implement IDrawable
                    ((IDrawable)field.ChessPiece).Draw(gameTime);   
                }
            }

            Engine.SpriteBatch.End();
        }

        private void PopulateChessBoard()
        {
            //TODO: Implement
        }
    }
}
