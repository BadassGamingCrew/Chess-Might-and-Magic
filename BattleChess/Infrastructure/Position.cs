// <auto-generated />
namespace BattleChess.Infrastructure
{
    using System;
    using Interfaces;
    using Utilities;

    /// <summary>
    /// Position on the Chess board.
    /// </summary>
    public class Position : IPosition
    {
        private char column;
        private int row;

        /// <summary>
        /// Position constructor that takes column and row as arguments
        /// </summary>
        /// <param name="column">The column of the new Position object</param>
        /// <param name="row">The row of the new Position object</param>
        public Position(char column, int row) 
        {
            this.Column = column;
            this.Row = row;
        }


        public char Column
        {
            get { return column; }

            private set
            {
                if (value < 'A' || value > 'H')
                {
                    throw new ArgumentOutOfRangeException("value", ErrorMessages.InvalidColumn);
                }
                this.column = value;
            }
        }

        public int Row
        {
            get { return row; }

            private set
            {
                if (value < 1 || value > 8)
                {
                    throw new ArgumentOutOfRangeException("value", ErrorMessages.InvalidRow);
                }
                this.row = value;
            }
        }

        /// <summary>
        /// Overrides Object.Equals
        /// </summary>
        /// <param name="other">The IPosition object that this object is compared against</param>
        /// <returns>True if the the Column and Row properties of the two objects, have the same values</returns>
        public bool Equals(IPosition other)
        {
            return this.ColumnIsSame(other.Column) && this.RowIsSame(other.Row);
        }

        private bool ColumnIsSame(char otherColumn)
        {
            return this.Column == otherColumn;
        }

        private bool RowIsSame(int otherRow)
        {
            return this.Row == otherRow;
        }
    }
}
